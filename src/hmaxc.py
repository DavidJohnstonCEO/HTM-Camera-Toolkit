# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hmaxc', [dirname(__file__)])
        except ImportError:
            import _hmaxc
            return _hmaxc
        if fp is not None:
            try:
                _mod = imp.load_module('_hmaxc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hmaxc = swig_import_helper()
    del swig_import_helper
else:
    import _hmaxc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class floatCArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatCArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatCArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_floatCArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_floatCArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hmaxc.floatCArray___getitem__(self, *args)
    def __setitem__(self, *args): return _hmaxc.floatCArray___setitem__(self, *args)
    def cast(self): return _hmaxc.floatCArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hmaxc.floatCArray_frompointer
    if _newclass:frompointer = staticmethod(_hmaxc.floatCArray_frompointer)
floatCArray_swigregister = _hmaxc.floatCArray_swigregister
floatCArray_swigregister(floatCArray)

def floatCArray_frompointer(*args):
  return _hmaxc.floatCArray_frompointer(*args)
floatCArray_frompointer = _hmaxc.floatCArray_frompointer

class intCArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intCArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intCArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_intCArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_intCArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hmaxc.intCArray___getitem__(self, *args)
    def __setitem__(self, *args): return _hmaxc.intCArray___setitem__(self, *args)
    def cast(self): return _hmaxc.intCArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hmaxc.intCArray_frompointer
    if _newclass:frompointer = staticmethod(_hmaxc.intCArray_frompointer)
intCArray_swigregister = _hmaxc.intCArray_swigregister
intCArray_swigregister(intCArray)

def intCArray_frompointer(*args):
  return _hmaxc.intCArray_frompointer(*args)
intCArray_frompointer = _hmaxc.intCArray_frompointer

class LayerC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_LayerC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_LayerC
    __del__ = lambda self : None;
    def xSize(self): return _hmaxc.LayerC_xSize(self)
    def ySize(self): return _hmaxc.LayerC_ySize(self)
    def fSize(self): return _hmaxc.LayerC_fSize(self)
    def xSpace(self): return _hmaxc.LayerC_xSpace(self)
    def ySpace(self): return _hmaxc.LayerC_ySpace(self)
    def xCenter(self, *args): return _hmaxc.LayerC_xCenter(self, *args)
    def yCenter(self, *args): return _hmaxc.LayerC_yCenter(self, *args)
    def getXRFDist(self, *args): return _hmaxc.LayerC_getXRFDist(self, *args)
    def getYRFDist(self, *args): return _hmaxc.LayerC_getYRFDist(self, *args)
    def RFDist(self, *args): return _hmaxc.LayerC_RFDist(self, *args)
    def getXRFNear(self, *args): return _hmaxc.LayerC_getXRFNear(self, *args)
    def getYRFNear(self, *args): return _hmaxc.LayerC_getYRFNear(self, *args)
    def RFNear(self, *args): return _hmaxc.LayerC_RFNear(self, *args)
    def setValue(self, *args): return _hmaxc.LayerC_setValue(self, *args)
    def getValue(self, *args): return _hmaxc.LayerC_getValue(self, *args)
    def getLayerData(self, *args): return _hmaxc.LayerC_getLayerData(self, *args)
    def min(self, *args): return _hmaxc.LayerC_min(self, *args)
    def max(self, *args): return _hmaxc.LayerC_max(self, *args)
LayerC_swigregister = _hmaxc.LayerC_swigregister
LayerC_swigregister(LayerC)

class GaborFilterC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaborFilterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaborFilterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_GaborFilterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_GaborFilterC
    __del__ = lambda self : None;
    def thetaCount(self): return _hmaxc.GaborFilterC_thetaCount(self)
    def computeLayer(self, *args): return _hmaxc.GaborFilterC_computeLayer(self, *args)
GaborFilterC_swigregister = _hmaxc.GaborFilterC_swigregister
GaborFilterC_swigregister(GaborFilterC)

class MaxFilterC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxFilterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaxFilterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_MaxFilterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_MaxFilterC
    __del__ = lambda self : None;
    def computeLayer(self, *args): return _hmaxc.MaxFilterC_computeLayer(self, *args)
MaxFilterC_swigregister = _hmaxc.MaxFilterC_swigregister
MaxFilterC_swigregister(MaxFilterC)

class GRBFFilterC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GRBFFilterC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GRBFFilterC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hmaxc.new_GRBFFilterC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hmaxc.delete_GRBFFilterC
    __del__ = lambda self : None;
    def computeLayer(self, *args): return _hmaxc.GRBFFilterC_computeLayer(self, *args)
GRBFFilterC_swigregister = _hmaxc.GRBFFilterC_swigregister
GRBFFilterC_swigregister(GRBFFilterC)

# This file is compatible with both classic and new-style classes.


